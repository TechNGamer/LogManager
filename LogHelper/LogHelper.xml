<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LogHelper</name>
    </assembly>
    <members>
        <member name="T:Utilities.Log.MessageStatus">
            <summary>
            This tells the LogManager where to put the messages it recieves without having 3 seperate methods.
            It also tells methods that are part of the WritingMessage delegate of what type the message is.
            </summary>
        </member>
        <member name="F:Utilities.Log.MessageStatus.Verbose">
            <summary>
            Indicates that the message is just a verbose message.
            </summary>
        </member>
        <member name="F:Utilities.Log.MessageStatus.Error">
            <summary>
            Indicates that the message is an error message.
            </summary>
        </member>
        <member name="F:Utilities.Log.MessageStatus.Exception">
            <summary>
            Indicates that the message came from an exception.
            </summary>
        </member>
        <member name="T:Utilities.Log.LogManager">
            <summary>
            The LogManager handles all communication to the logs.
            Please note that this is a singleton, however the singleton is only accessable via classes in the LogHelper assembly.
            </summary>
        </member>
        <member name="P:Utilities.Log.LogManager.LogFolder">
            <summary>
            The location of the log folder.
            </summary>
        </member>
        <member name="P:Utilities.Log.LogManager.VerboseLog">
            <summary>
            The path to the verbose log file.
            </summary>
        </member>
        <member name="P:Utilities.Log.LogManager.ErrorLog">
            <summary>
            The path to the error log file.
            </summary>
        </member>
        <member name="P:Utilities.Log.LogManager.ExceptionLog">
            <summary>
            The path to the error log file.
            </summary>
        </member>
        <member name="F:Utilities.Log.LogManager.LogEncoding">
            <summary>
            Get's the encoding type the log files are written in.
            </summary>
        </member>
        <member name="T:Utilities.Log.LogManager.WritingMessage">
            <summary>
            This delegate provides the message and the type of the message to all methods.
            </summary>
            <param name="message">The message that was printed out.</param>
            <param name="status">THe kind of message it was.</param>
        </member>
        <member name="F:Utilities.Log.LogManager.writingMessage">
            <summary>
            Used to signal to classes/objects that the log manager has written the message to the logs.
            </summary>
        </member>
        <member name="M:Utilities.Log.LogManager.#cctor">
            <summary>
            This static constructor set's up the entire class before LogManager is instantiated.
            </summary>
        </member>
        <member name="T:Utilities.Log.LogTalker">
            <summary>
            This class acts as a middle man to the log files.
            This enables the logs to help tell the person looking at it where a message came from.
            All messages will be passed to the actual log manager with this format: mm/dd/yy HH:mm:ss '[Full name of class' said: [message]
            </summary>
        </member>
        <member name="P:Utilities.Log.LogTalker.LogFolder">
            <summary>
            Exposes the log folder location.
            </summary>
        </member>
        <member name="P:Utilities.Log.LogTalker.VerboseLog">
            <summary>
            Exposes the verbose.log file location.
            </summary>
        </member>
        <member name="P:Utilities.Log.LogTalker.ErrorLog">
            <summary>
            Exposes the verbose.log file location.
            </summary>
        </member>
        <member name="P:Utilities.Log.LogTalker.ExceptionLog">
            <summary>
            Exposes the error.log file location.
            </summary>
        </member>
        <member name="P:Utilities.Log.LogTalker.LogEncoding">
            <summary>
            Exposes the exception.log file location.
            </summary>
        </member>
        <member name="P:Utilities.Log.LogTalker.WritingMessage">
            <summary>
            Used to notify classes/objects that the LogManager has outputted a new message to the log file.
            </summary>
        </member>
        <member name="M:Utilities.Log.LogTalker.FinishWriting">
            <summary>
            Tells LogManager to signal to the logging thread to finish writing and terminate.
            </summary>
        </member>
        <member name="P:Utilities.Log.LogTalker.RepresentName">
            <summary>
            The name of the object that this object will be representing in the logs.
            </summary>
        </member>
        <member name="M:Utilities.Log.LogTalker.#ctor(System.Type@)">
            <summary>
            Creates a new LogTalker for the Type passed to it.
            This constructor is great for static classes.
            </summary>
            <param name="t">The type of the object.</param>
        </member>
        <member name="M:Utilities.Log.LogTalker.#ctor(System.Object@)">
            <summary>
            Creates a new LogTalker for the object passed to it.
            This constructor makes it more specific to which object it is refering to.
            It does this by grabbing the objects address and appending it to the represent name.
            </summary>
            <param name="obj">The object you wish to be represented.</param>
        </member>
        <member name="M:Utilities.Log.LogTalker.#ctor(System.Type,System.Boolean)">
            <summary>
            Creates a new LogTalker for the Type passed to it.
            Comes with the option to print out the message sent to it to the console.
            </summary>
            <param name="t">The type of the object.</param>
            <param name="printToConsole">A boolean for rather every call will print to the console.</param>
        </member>
        <member name="M:Utilities.Log.LogTalker.#ctor(System.Object@,System.Boolean)">
            <summary>
            Creates a new LogTalker for the object passed to it.
            This constructor makes it more specific to which object by also including the objects hash code.
            </summary>
            <param name="o">The object you wish to be represented.</param>
            <param name="printToConsole">A boolean for rather every call will print to the console.</param>
        </member>
        <member name="M:Utilities.Log.LogTalker.WriteVerbose(System.String)">
            <summary>
            Writes any messages passed to it to the verbose log.
            </summary>
            <param name="message">The message that will be written to verbose.log.</param>
        </member>
        <member name="M:Utilities.Log.LogTalker.WriteError(System.String)">
            <summary>
            Writes any messages passed to it to the error log.
            </summary>
            <param name="message">The message that will be written to error.log.</param>
        </member>
        <member name="M:Utilities.Log.LogTalker.WriteException(System.String,System.Boolean)">
            <summary>
            Writes any messages passed to it to the exception log.
            By default, <paramref name="crash"/> is default true, meaning that it will print the message to the console if present.
            </summary>
            <param name="message">The message the will be written to exception.log.</param>
            <param name="crash">A boolean for printing the exception message to the console or not and exit the program.</param>
        </member>
        <member name="M:Utilities.Log.LogTalker.WriteException(System.String,System.Exception,System.Boolean)">
            <summary>
            Writes any messages passed to it to the exception log.
            By default, <paramref name="crash"/> is default true, meaning that it will print the message to the console if present.
            <paramref name="e"/> will be incorperated into the message before being written to the log file.
            See also: <seealso cref="M:Utilities.Log.LogTalker.WriteException(System.String,System.Boolean)"/>
            </summary>
            <param name="message">The message the will be written to exception.log.</param>
            <param name="e">The exception that will be incorperated into the message.</param>
            <param name="crash">A boolean for printing the exception message to the console or not.</param>
        </member>
        <member name="M:Utilities.Log.LogTalker.Close">
            <summary>
            Tells the LogManager to signal to the logging thread to write everything and terminate.
            </summary>
        </member>
    </members>
</doc>
